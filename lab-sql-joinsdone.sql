-- Welcome to the SQL Joins lab!
-- Challenge - Joining on multiple tables
-- Write SQL queries to perform the following tasks using the Sakila database:
-- 1 List the number of films per category
-- 2 Retrieve the store ID, city, and country for each store.
-- 3 Calculate the total revenue generated by each store in dollars.
-- 4 Determine the average running time of films for each category.

use sakila;
-- List the number of films per category
select 
    c.name as category,
    COUNT(fc.film_id) as film_count
from
    category c
left join
    film_category fc on c.category_id = fc.category_id
group by
    c.category_id, c.name
order by
    film_count desc;
    
-- Retrieve the store ID, city, and country for each store.
    
SELECT 
    s.store_id, 
    ci.city, 
    co.country
FROM 
    store s
JOIN 
    address a ON s.address_id = a.address_id 
JOIN 
    city ci ON a.city_id = ci.city_id 
JOIN 
    country co ON ci.country_id = co.country_id;
    
-- Calculate the total revenue generated by each store in dollars.
    
SELECT 
    s.store_id, 
    SUM(p.amount) AS total_revenue
FROM 
    store s
JOIN 
    customer c ON s.store_id = c.store_id 
JOIN 
    payment p ON c.customer_id = p.customer_id  
GROUP BY 
    s.store_id;
    
-- Determine the average running time of films for each category.  

SELECT 
    c.name AS category_name, 
    AVG(f.length) AS average_running_time
FROM 
    film f
JOIN 
    film_category fc ON f.film_id = fc.film_id  
JOIN 
    category c ON fc.category_id = c.category_id 
GROUP BY 
    c.name;

-- Bonus:
-- 5 Identify the film categories with the longest average running time.
-- 6 Display the top 10 most frequently rented movies in descending order.
-- 7 Determine if "Academy Dinosaur" can be rented from Store 1.
-- 8 Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL." 

-- Identify the film categories with the longest average running time.

SELECT 
    c.name AS category_name, 
    AVG(f.length) AS average_running_time
FROM 
    film f
JOIN 
    film_category fc ON f.film_id = fc.film_id  
JOIN 
    category c ON fc.category_id = c.category_id  
GROUP BY 
    c.name 
ORDER BY 
    average_running_time DESC;
    
--  Display the top 10 most frequently rented movies in descending order.

SELECT 
    f.title, 
    COUNT(r.rental_id) AS rental_count
FROM 
    rental r
JOIN 
    inventory i ON r.inventory_id = i.inventory_id 
JOIN 
    film f ON i.film_id = f.film_id 
GROUP BY 
    f.title
ORDER BY 
    rental_count DESC
LIMIT 10; 

-- Determine if "Academy Dinosaur" can be rented from Store 1.

SELECT 
    CASE 
        WHEN COUNT(i.inventory_id) > 0 THEN 'Available'  -- If there are available inventory items
        ELSE 'Not Available'                            -- If there are no items in inventory or rented out
    END AS availability
FROM 
    film f
JOIN 
    inventory i ON f.film_id = i.film_id  -- Join film to inventory
WHERE 
    f.title = 'Academy Dinosaur' AND       -- Check for the specific film
    i.store_id = 1 AND                     -- Check for Store 1
    i.inventory_id NOT IN (                 -- Ensure the film is not currently rented
        SELECT r.inventory_id 
        FROM rental r 
    );
    
 -- 8 Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL." 

SELECT 
    f.title AS film_title,
    CASE 
        WHEN COUNT(i.inventory_id) > 0 THEN 'Available'
        ELSE 'NOT available'
    END AS availability_status
FROM 
    film f
LEFT JOIN 
    inventory i ON f.film_id = i.film_id  -- Left join to include films not in inventory
GROUP BY 
    f.title; 
    